<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Role extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'description',
        'permissions'
    ];

    protected $casts = [
        'permissions' => 'array'
    ];

    public function users()
    {
        return $this->hasMany(User::class);
    }
}


egulo RoleHelper

<?php

if (!function_exists('hasRole')) {
    function hasRole($roles)
    {
        if (!auth()->check()) {
            return false;
        }
        
        $user = auth()->user();
        
        if (is_array($roles)) {
            return $user->hasAnyRole($roles);
        }
        
        return $user->hasRole($roles);
    }
}

if (!function_exists('hasPermission')) {
    function hasPermission($permission)
    {
        if (!auth()->check()) {
            return false;
        }
        
        return auth()->user()->hasPermission($permission);
    }
}

if (!function_exists('canAccessProperty')) {
    function canAccessProperty($propertyId)
    {
        if (!auth()->check()) {
            return false;
        }
        
        $user = auth()->user();
        
        // Super admin can access all properties
        if ($user->hasRole('super_admin')) {
            return true;
        }
        
        // Property manager can access their assigned properties
        if ($user->hasRole('property_manager')) {
            return $user->properties()->where('property_id', $propertyId)->exists();
        }
        
        return false;
    }
}


egulo RoleMiddleware

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class RoleMiddleware
{
    public function handle(Request $request, Closure $next, $role)
    {
        if (!auth()->check()) {
            return redirect()->route('login');
        }

        $user = auth()->user();
        
        if (!$user->hasRole($role)) {
            abort(403, 'Unauthorized action.');
        }

        return $next($request);
    }
}


egulo user.php er code
<?php

namespace App\Models;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, Notifiable;

    protected $fillable = [
        'name',
        'email', 
        'password',
        'role_id'
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    // Add relationship to Role
    public function role()
    {
        return $this->belongsTo(Role::class);
    }

    // Add hasRole method
    public function hasRole($roleName)
    {
        if (!$this->role) {
            return false;
        }
        
        return $this->role->name === $roleName;
    }

    // Additional helper method to check multiple roles
    public function hasAnyRole($roles)
    {
        if (!$this->role) {
            return false;
        }

        if (is_array($roles)) {
            return in_array($this->role->name, $roles);
        }

        return $this->role->name === $roles;
    }
}